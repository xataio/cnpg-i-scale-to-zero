name: CI

on:
  pull_request:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PLUGIN: ${{ github.repository }}
  IMAGE_NAME_SIDECAR: ${{ github.repository }}-sidecar
  IS_MAIN_BRANCH: ${{ github.ref == 'refs/heads/main' }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make test

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.0

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'release'
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
        image: [plugin, sidecar]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract platform name
        id: platform
        run: echo "name=$(echo ${{ matrix.platform }} | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Set image variables
        id: image
        run: |
          # Set image-specific variables
          if [ "${{ matrix.image }}" = "plugin" ]; then
            echo "dockerfile=./Dockerfile.plugin" >> $GITHUB_OUTPUT
            echo "name=${{ env.IMAGE_NAME_PLUGIN }}" >> $GITHUB_OUTPUT
          else
            echo "dockerfile=./Dockerfile.sidecar" >> $GITHUB_OUTPUT
            echo "name=${{ env.IMAGE_NAME_SIDECAR }}" >> $GITHUB_OUTPUT
          fi

          # Set image tag
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=main-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.image.outputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${{ steps.image.outputs.tag }}-${{ steps.platform.outputs.name }}
          build-args: |
            VERSION=${{ steps.image.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-docker-manifests:
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'release'
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        image: [plugin, sidecar]

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image variables
        id: image
        run: |
          # Set image name
          if [ "${{ matrix.image }}" = "plugin" ]; then
            echo "name=${{ env.IMAGE_NAME_PLUGIN }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ env.IMAGE_NAME_SIDECAR }}" >> $GITHUB_OUTPUT
          fi

          # Set image tag
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=main-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Create and push manifest
        run: |
          IMAGE_TAG="${{ steps.image.outputs.tag }}"

          # Create primary manifest with SHA-based tag
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${IMAGE_TAG} \
            ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${IMAGE_TAG}-linux-amd64 \
            ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${IMAGE_TAG}-linux-arm64

          # Create moving 'main' tag for main branch builds
          if [ "${{ env.IS_MAIN_BRANCH }}" = "true" ] && [ "${{ github.event_name }}" != "release" ]; then
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:main \
              ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${IMAGE_TAG}-linux-amd64 \
              ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${IMAGE_TAG}-linux-arm64
          fi

          # Create latest tag for releases
          if [ "${{ github.event_name }}" = "release" ]; then
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:latest \
              ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${IMAGE_TAG}-linux-amd64 \
              ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${IMAGE_TAG}-linux-arm64
          fi

  manifest:
    runs-on: ubuntu-latest
    needs: [build-docker-manifests]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update kustomization with image tag
        run: |
          # Set image tag
          if [ "${{ github.event_name }}" = "release" ]; then
            IMAGE_TAG="${{ github.event.release.tag_name }}"
          else
            IMAGE_TAG="main-${GITHUB_SHA::7}"
          fi

          # Update the plugin image tag in kustomization.yaml
          sed -i "s/newTag: main/newTag: ${IMAGE_TAG}/g" kubernetes/kustomization.yaml

          # Update the secret generator value to use the correct sidecar tag
          sed -i "s|ghcr.io/xataio/cnpg-i-scale-to-zero-sidecar:main|ghcr.io/xataio/cnpg-i-scale-to-zero-sidecar:${IMAGE_TAG}|g" kubernetes/kustomization.yaml

      - name: Generate manifest
        run: make manifest

      - name: Upload manifest artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-manifest-main
          path: |
            manifest.yaml
          retention-days: 7

      - name: Upload manifest to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./manifest.yaml
          asset_name: manifest.yaml
          asset_content_type: application/x-yaml
